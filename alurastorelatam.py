# -*- coding: utf-8 -*-
"""AluraStoreLatam.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xTTe2Sp-o1OP_PJyYLg1ACHbNlV_Gf6F

### Importaci√≥n de datos
"""

import pandas as pd

url = "https://raw.githubusercontent.com/alura-es-cursos/challenge1-data-science-latam/refs/heads/main/base-de-datos-challenge1-latam/tienda_1%20.csv"
url2 = "https://raw.githubusercontent.com/alura-es-cursos/challenge1-data-science-latam/refs/heads/main/base-de-datos-challenge1-latam/tienda_2.csv"
url3 = "https://raw.githubusercontent.com/alura-es-cursos/challenge1-data-science-latam/refs/heads/main/base-de-datos-challenge1-latam/tienda_3.csv"
url4 = "https://raw.githubusercontent.com/alura-es-cursos/challenge1-data-science-latam/refs/heads/main/base-de-datos-challenge1-latam/tienda_4.csv"

tienda = pd.read_csv(url)
tienda2 = pd.read_csv(url2)
tienda3 = pd.read_csv(url3)
tienda4 = pd.read_csv(url4)

tienda.head()

"""#1. An√°lisis de facturaci√≥n


"""

# Bloque 2: Creaci√≥n de 'valor_total'
try:
    tiendas['valor_total'] = tiendas['Precio'] + tiendas['Costo de env√≠o']
    print("‚úÖ Columna 'valor_total' creada correctamente")
except KeyError as e:
    print(f"‚ùå Columna no encontrada al crear valor_total: {e}")
except Exception as e:
    print(f"‚ùå Error creando 'valor_total': {e}")

# Bloque 3: An√°lisis de facturaci√≥n por tienda
try:
    facturacion_por_tienda = (
        tiendas
        .groupby('tienda_id')['valor_total']
        .sum()
        .reset_index(name='facturacion_total')
    )
    print("üîç Facturaci√≥n por tienda:")
    print(facturacion_por_tienda)
except Exception as e:
    print(f"‚ùå Error en an√°lisis de facturaci√≥n por tienda: {e}")

"""# 2. Ventas por categor√≠a"""

# Bloque 4: Ventas por categor√≠a por tienda
try:
    ventas_por_categoria = (
        tiendas
        .groupby(['tienda_id', 'Categor√≠a del Producto'])
        .size()
        .reset_index(name='ventas')
        .sort_values(['tienda_id', 'ventas'], ascending=[True, False])
    )
    print("\nüîç Ventas por categor√≠a y tienda:")
    print(ventas_por_categoria)
except Exception as e:
    print(f"‚ùå Error en ventas por categor√≠a por tienda: {e}")

"""# 3. Calificaci√≥n promedio de la tienda

"""

# Bloque 5: Calificaci√≥n promedio por tienda
try:
    calificacion_por_tienda = (
        tiendas
        .groupby('tienda_id')['Calificaci√≥n']
        .mean()
        .reset_index(name='calificacion_promedio')
    )
    print("\nüîç Calificaci√≥n promedio por tienda:")
    print(calificacion_por_tienda)
except Exception as e:
    print(f"‚ùå Error en calificaci√≥n promedio por tienda: {e}")



"""# 4. Productos m√°s y menos vendidos"""

# Bloque 6: Productos m√°s y menos vendidos por tienda
try:
    mas_menos = []
    for tid, df in tiendas.groupby('tienda_id'):
        ventas_prod = df.groupby('Producto').size()
        mas = ventas_prod.idxmax()
        menos = ventas_prod.idxmin()
        mas_menos.append({'tienda_id': tid,
                          'mas_vendido': mas,
                          'ventas_mas': int(ventas_prod.max()),
                          'menos_vendido': menos,
                          'ventas_menos': int(ventas_prod.min())})
    resumen_prod = pd.DataFrame(mas_menos)
    print("\nüîç Productos m√°s y menos vendidos por tienda:")
    print(resumen_prod)
except Exception as e:
    print(f"‚ùå Error en productos m√°s/menos vendidos por tienda: {e}")



"""# 5. Env√≠o promedio por tienda"""

# Bloque 7: Env√≠o promedio por tienda
try:
    envio_promedio = (
        tiendas
        .groupby('tienda_id')['Costo de env√≠o']
        .mean()
        .reset_index(name='envio_promedio')
    )
    print("\nüîç Env√≠o promedio por tienda:")
    print(envio_promedio)
except Exception as e:
    print(f"‚ùå Error en env√≠o promedio por tienda: {e}")

# Relatorio para el Se√±or Juan
try:
    # Identificar tienda con menor facturaci√≥n (lucro)
    tienda_menor = facturacion_por_tienda.loc[
        facturacion_por_tienda['facturacion_total'].idxmin(), 'tienda_id'
    ]
    valor_min = facturacion_por_tienda['facturacion_total'].min()

    reporte = f"""
Se√±or Juan,

Tras el an√°lisis realizado:

1. La tienda con menor facturaci√≥n total es {tienda_menor} con ${valor_min:,.2f}.
2. Se recomienda evaluar la venta o reestructuraci√≥n de esta tienda para optimizar su rentabilidad.
"""
    print(reporte)
except Exception as e:
    print(f"‚ùå Error generando el relatorio: {e}")